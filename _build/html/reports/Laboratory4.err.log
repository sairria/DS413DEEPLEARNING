Traceback (most recent call last):
  File "C:\Users\user\sairria\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\user\sairria\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\user\sairria\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\user\sairria\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\user\sairria\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\user\sairria\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\user\sairria\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#BATCH_SIZE = 8
EPOCHS = 1000
LEARNING_RATE = 0.01 # Standard value for SGD; not specified, so we choose one.
INPUT_SIZE = 1       # We'll use a single feature for simplicity
HIDDEN_SIZE = 32     # A reasonable size for the hidden layer
OUTPUT_SIZE = 1      # For a linear regression task

# Creating a simple dataset: y = 2x + 1 + noise
N_SAMPLES = 100
X_numpy = torch.randn(N_SAMPLES, INPUT_SIZE) * 10 # 100 samples, 1 feature
y_numpy = 2 * X_numpy + 1 + torch.randn(N_SAMPLES, OUTPUT_SIZE) * 2 # Linear + noise

# Convert to PyTorch Tensors
X_tensor = X_numpy.float()
y_tensor = y_numpy.float()

# Create Dataset and DataLoader
dataset = TensorDataset(X_tensor, y_tensor)
data_loader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True)

print(f"Dataset size: {len(dataset)} samples")
------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 19[39m
[32m     17[39m [38;5;66;03m# Create Dataset and DataLoader[39;00m
[32m     18[39m dataset = TensorDataset(X_tensor, y_tensor)
[32m---> [39m[32m19[39m data_loader = DataLoader(dataset, batch_size=[43mBATCH_SIZE[49m, shuffle=[38;5;28;01mTrue[39;00m)
[32m     21[39m [38;5;28mprint[39m([33mf[39m[33m"[39m[33mDataset size: [39m[38;5;132;01m{[39;00m[38;5;28mlen[39m(dataset)[38;5;132;01m}[39;00m[33m samples[39m[33m"[39m)

[31mNameError[39m: name 'BATCH_SIZE' is not defined

